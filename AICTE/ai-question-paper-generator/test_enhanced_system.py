#!/usr/bin/env python3
"""
Comprehensive Test Script for Enhanced AI Question Paper Generator

This script tests all enhanced features including:
- PDF input parsing
- Word document input parsing
- Unit-based selection
- Total marks distribution
- Word document export
- GUI functionality
"""

import sys
import os
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """Test if all required modules can be imported"""
    print("🔍 Testing imports...")
    
    try:
        from src.enhanced_features import EnhancedQuestionSelector, WordDocumentGenerator, EnhancedInputParser
        print("✅ Enhanced features imported successfully")
        return True
    except ImportError as e:
        print(f"❌ Enhanced features import failed: {e}")
        return False

def test_sample_data():
    """Test loading sample data"""
    print("\n📊 Testing sample data loading...")
    
    try:
        from src.data_processing.question_parser import QuestionParser
        
        parser = QuestionParser()
        
        # Try enhanced sample data first
        sample_files = [
            "data/enhanced_sample_questions.csv",
            "data/sample_questions.csv"
        ]
        
        for sample_file in sample_files:
            if os.path.exists(sample_file):
                questions = parser.parse_file(sample_file)
                print(f"✅ Loaded {len(questions)} questions from {sample_file}")
                return questions
        
        print("⚠️ No sample data files found")
        return []
        
    except Exception as e:
        print(f"❌ Sample data loading failed: {e}")
        return []

def test_enhanced_selection(questions):
    """Test enhanced unit-based selection"""
    print("\n🎯 Testing enhanced selection...")
    
    if not questions:
        print("⚠️ No questions available for testing")
        return
    
    try:
        from src.enhanced_features import EnhancedQuestionSelector
        
        selector = EnhancedQuestionSelector()
        selector.load_questions(questions)
        
        # Get available units
        units = selector.get_available_units()
        print(f"📝 Available units: {units}")
        
        if units:
            # Test unit-based selection
            selected_units = units[:2] if len(units) >= 2 else units
            result = selector.select_questions_by_units_and_marks(
                selected_units=selected_units,
                total_marks=60
            )
            
            print(f"✅ Selected {len(result['questions'])} questions")
            print(f"📊 Total marks: {result['paper_config']['actual_marks']}")
            print(f"📈 Distribution: {result['paper_config']['distribution']}")
            
            return result['questions']
        else:
            print("⚠️ No units found in sample data")
            return []
            
    except Exception as e:
        print(f"❌ Enhanced selection failed: {e}")
        return []

def test_word_export(questions):
    """Test Word document export"""
    print("\n📝 Testing Word document export...")
    
    if not questions:
        print("⚠️ No questions available for export testing")
        return
    
    try:
        from src.enhanced_features import WordDocumentGenerator
        
        generator = WordDocumentGenerator()
        
        # Create exports directory
        os.makedirs("exports", exist_ok=True)
        
        output_path = generator.generate_question_paper(
            questions=questions,
            title="Test Question Paper",
            instructions="This is a test paper generated by the enhanced system.",
            output_path="exports/test_paper.docx"
        )
        
        print(f"✅ Word document exported: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"❌ Word export failed: {e}")
        return None

def test_pdf_parsing():
    """Test PDF parsing if sample PDF exists"""
    print("\n📄 Testing PDF parsing...")
    
    try:
        from src.enhanced_features import EnhancedInputParser
        
        parser = EnhancedInputParser()
        
        # Look for sample PDF files
        pdf_files = [
            "data/sample_questions.pdf",
            "exports/test_final.pdf"
        ]
        
        for pdf_file in pdf_files:
            if os.path.exists(pdf_file):
                questions = parser.parse_pdf_questions(pdf_file)
                print(f"✅ Parsed {len(questions)} questions from {pdf_file}")
                return questions
        
        print("⚠️ No sample PDF files found for testing")
        return []
        
    except Exception as e:
        print(f"❌ PDF parsing failed: {e}")
        return []

def test_gui_functionality():
    """Test if GUI can be launched"""
    print("\n🖥️ Testing GUI functionality...")
    
    try:
        import streamlit as st
        print("✅ Streamlit available")
        
        # Check if main streamlit app exists
        if os.path.exists("streamlit_app.py"):
            print("✅ Main GUI file found: streamlit_app.py")
            print("💡 To run GUI: streamlit run streamlit_app.py")
        else:
            print("⚠️ Main GUI file not found")
        
        return True
        
    except ImportError:
        print("❌ Streamlit not available")
        return False

def main():
    """Run comprehensive tests"""
    print("🚀 Starting comprehensive test suite...")
    print("=" * 60)
    
    # Test 1: Imports
    imports_ok = test_imports()
    
    # Test 2: Sample data
    questions = test_sample_data()
    
    # Test 3: Enhanced selection
    if imports_ok and questions:
        selected_questions = test_enhanced_selection(questions)
    else:
        selected_questions = []
    
    # Test 4: Word export
    if imports_ok and selected_questions:
        test_word_export(selected_questions)
    
    # Test 5: PDF parsing
    if imports_ok:
        test_pdf_parsing()
    
    # Test 6: GUI
    test_gui_functionality()
    
    print("\n" + "=" * 60)
    print("🏁 Test suite completed!")
    
    if imports_ok:
        print("\n🎉 Enhanced features are ready!")
        print("\n📋 Quick Start Commands:")
        print("  • CLI: python minimal_cli.py")
        print("  • GUI: streamlit run streamlit_app.py")
        print("  • Demo: python demos/enhanced_demo.py")
    else:
        print("\n⚠️ Some features not available. Install missing dependencies:")
        print("  pip install python-docx PyPDF2 pdfplumber")

if __name__ == "__main__":
    main()
